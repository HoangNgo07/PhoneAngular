{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000';\n    this.header = new HttpHeaders();\n    this.header = this.header.append(\"Accept\", \"application/json\");\n    this.header = this.header.append(\"Content-Type\", \"application/json\");\n    if (localStorage.getItem('token')) {\n      this.header = this.header.set('Authorization', `Bearer ${localStorage.getItem('token')}`);\n    }\n  }\n  get(path) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((win, lose) => {\n      this.http.get(urlApi, {\n        headers: this.header\n      }).pipe(catchError(err => {\n        lose(err);\n        return err;\n      })).subscribe(res => {\n        win(res);\n      });\n    });\n  }\n  post(path, body) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((resolve, reject) => {\n      // RESOLVE: thanh cong; REJECT: that bai\n      this.http.post(urlApi, body, {\n        headers: this.header\n      }).pipe(catchError(err => {\n        reject(err);\n        return err;\n      })).subscribe(res => {\n        resolve(res);\n      });\n    });\n  }\n  patch(path, body) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((resolve, reject) => {\n      this.http.patch(urlApi, body, {\n        headers: this.header\n      }).subscribe(res => {\n        resolve(res);\n      }, err => {\n        reject(err);\n      });\n    });\n  }\n  login(phonenumber, password) {\n    const body = {\n      phonenumber: phonenumber,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post(`${this.baseUrl}/login`, body).subscribe(res => {\n        // ThÃªm accept_token vÃ o header\n        this.header = this.header.set('Authorization', `Bearer ${res.data.access_token}`);\n        localStorage.setItem('token', res.data.access_token);\n        localStorage.setItem('phone', phonenumber);\n        // console.log(\"ðŸš€ ~ file: data.service.ts:76 ~ DataService ~ this.http.post ~ res.access_token:\", localStorage.getItem('token'))\n        resolve(res);\n      }, err => reject(err));\n    });\n  }\n  register(username, password, email) {\n    const body = {\n      username: username,\n      password: password,\n      email: email\n    };\n    return this.post('/register', body);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('phone');\n  }\n}\nDataService.Éµfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ÉµÉµinject(i1.HttpClient));\n};\nDataService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: DataService,\n  factory: DataService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","DataService","constructor","http","header","append","localStorage","getItem","set","get","path","urlApi","baseUrl","Promise","win","lose","headers","pipe","err","subscribe","res","post","body","resolve","reject","patch","login","phonenumber","password","data","access_token","setItem","register","username","email","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\ITC\\HocKi_5\\UD_WEB\\ANGULAR_CK\\shop\\src\\app\\service\\data.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class DataService {\n\tprivate baseUrl: string = 'http://localhost:3000';\n\theader: HttpHeaders = new HttpHeaders();\n\tconstructor(private http: HttpClient) {\n\t\tthis.header = this.header.append(\"Accept\", \"application/json\");\n\t\tthis.header = this.header.append(\"Content-Type\", \"application/json\");\n\t\tif (localStorage.getItem('token')) {\n\t\t\tthis.header = this.header.set('Authorization', `Bearer ${localStorage.getItem('token')}`);\n\t\t}\n\t}\n\tget(path: string) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((win, lose) => {\n\t\t\tthis.http\n\t\t\t\t.get(urlApi, { headers: this.header })\n\t\t\t\t.pipe(\n\t\t\t\t\tcatchError((err) => {\n\t\t\t\t\t\tlose(err);\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.subscribe((res) => {\n\t\t\t\t\twin(res);\n\t\t\t\t});\n\t\t});\n\t}\n\tpost(path: string, body: any) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// RESOLVE: thanh cong; REJECT: that bai\n\t\t\tthis.http\n\t\t\t\t.post(urlApi, body, { headers: this.header })\n\t\t\t\t.pipe(\n\t\t\t\t\tcatchError((err) => {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.subscribe((res) => {\n\t\t\t\t\tresolve(res);\n\t\t\t\t});\n\t\t});\n\t}\n\tpatch(path: string, body: any) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.http\n\t\t\t\t.patch(urlApi, body, { headers: this.header })\n\t\t\t\t.subscribe(\n\t\t\t\t\t(res) => {\n\t\t\t\t\t\tresolve(res);\n\t\t\t\t\t},\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t});\n\t}\n\tlogin(phonenumber: string, password: string) {\n\t\tconst body = {\n\t\t\tphonenumber: phonenumber,\n\t\t\tpassword: password\n\t\t};\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.http.post(`${this.baseUrl}/login`, body).subscribe((res: any) => {\n\t\t\t\t// ThÃªm accept_token vÃ o header\n\t\t\t\tthis.header = this.header.set('Authorization', `Bearer ${res.data.access_token}`);\n\t\t\t\tlocalStorage.setItem('token', res.data.access_token);\n\t\t\t\tlocalStorage.setItem('phone',phonenumber);\n\t\t\t\t// console.log(\"ðŸš€ ~ file: data.service.ts:76 ~ DataService ~ this.http.post ~ res.access_token:\", localStorage.getItem('token'))\n\t\t\t\tresolve(res);\n\t\t\t}, err => reject(err));\n\t\t});\n\t}\n\n\tregister(username: string, password: string, email: string) {\n\t\tconst body = {\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t\temail: email\n\t\t};\n\t\treturn this.post('/register', body);\n\t}\n\tlogout(){\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('phone');\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
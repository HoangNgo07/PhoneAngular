{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:3000';\n      this.header = new HttpHeaders();\n      this.header = this.header.append(\"Accept\", \"application/json\");\n      this.header = this.header.append(\"Content-Type\", \"application/json\");\n      if (localStorage.getItem('token')) {\n        this.header = this.header.set('Authorization', `Bearer ${localStorage.getItem('token')}`);\n      }\n    }\n    get(path) {\n      let urlApi = this.baseUrl + path;\n      return new Promise((win, lose) => {\n        this.http.get(urlApi, {\n          headers: this.header\n        }).pipe(catchError(err => {\n          lose(err);\n          return err;\n        })).subscribe(res => {\n          win(res);\n        });\n      });\n    }\n    post(path, body) {\n      let urlApi = this.baseUrl + path;\n      return new Promise((resolve, reject) => {\n        // RESOLVE: thanh cong; REJECT: that bai\n        this.http.post(urlApi, body, {\n          headers: this.header\n        }).pipe(catchError(err => {\n          reject(err);\n          return err;\n        })).subscribe(res => {\n          resolve(res);\n        });\n      });\n    }\n    patch(path, body) {\n      let urlApi = this.baseUrl + path;\n      return new Promise((resolve, reject) => {\n        this.http.patch(urlApi, body, {\n          headers: this.header\n        }).subscribe(res => {\n          resolve(res);\n        }, err => {\n          reject(err);\n        });\n      });\n    }\n    login(phonenumber, password) {\n      const body = {\n        phonenumber: phonenumber,\n        password: password\n      };\n      return new Promise((resolve, reject) => {\n        this.http.post(`${this.baseUrl}/login`, body).subscribe(res => {\n          // ThÃªm accept_token vÃ o header\n          this.header = this.header.set('Authorization', `Bearer ${res.data.access_token}`);\n          localStorage.setItem('token', res.data.access_token);\n          localStorage.setItem('phone', phonenumber);\n          // console.log(\"ðŸš€ ~ file: data.service.ts:76 ~ DataService ~ this.http.post ~ res.access_token:\", localStorage.getItem('token'))\n          resolve(res);\n        }, err => reject(err));\n      });\n    }\n    register(username, password, email) {\n      const body = {\n        username: username,\n        password: password,\n        email: email\n      };\n      return this.post('/register', body);\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('phone');\n    }\n  }\n  DataService.Éµfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ÉµÉµinject(i1.HttpClient));\n  };\n  DataService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: DataService,\n    factory: DataService.Éµfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
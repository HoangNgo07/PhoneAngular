{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:3000';\n    this.header = new HttpHeaders();\n    this.header = this.header.append(\"Accept\", \"application/json\");\n    this.header = this.header.append(\"Content-Type\", \"application/json\");\n    if (localStorage.getItem('token')) {\n      this.header = this.header.set('Authorization', `Bearer ${res.access_token}`);\n    }\n  }\n  get(path) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((win, lose) => {\n      this.http.get(urlApi, {}).pipe(catchError(err => {\n        lose(err);\n        return err;\n      })).subscribe(res => {\n        win(res);\n      });\n    });\n  }\n  post(path, body) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((resolve, reject) => {\n      // RESOLVE: thanh cong; REJECT: that bai\n      this.http.post(urlApi, body, {\n        headers: this.header\n      }).pipe(catchError(err => {\n        reject(err);\n        return err;\n      })).subscribe(res => {\n        resolve(res);\n      });\n    });\n  }\n  patch(path, body) {\n    let urlApi = this.baseUrl + path;\n    return new Promise((resolve, reject) => {\n      this.http.patch(urlApi, body, {\n        headers: this.header\n      }).subscribe(res => {\n        resolve(res);\n      }, err => {\n        reject(err);\n      });\n    });\n  }\n  login(phonenumber, password) {\n    const body = {\n      phonenumber: phonenumber,\n      password: password\n    };\n    return new Promise((resolve, reject) => {\n      this.http.post(`${this.baseUrl}/login`, body).subscribe(res => {\n        // Thêm accept_token vào header\n        this.header = this.header.set('Authorization', `Bearer ${res.access_token}`);\n        localStorage.setItem('token', res.access_token);\n        resolve(res);\n      }, err => reject(err));\n    });\n  }\n  register(username, password, email) {\n    const body = {\n      username: username,\n      password: password,\n      email: email\n    };\n    return this.post('/register', body);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","DataService","constructor","http","header","append","localStorage","getItem","set","res","access_token","get","path","urlApi","baseUrl","Promise","win","lose","pipe","err","subscribe","post","body","resolve","reject","headers","patch","login","phonenumber","password","setItem","register","username","email","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ttri0\\OneDrive\\Documents\\GitHub\\ANGULAR\\shop\\src\\app\\service\\data.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { catchError } from \"rxjs\";\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class DataService {\n\tprivate baseUrl: string = 'http://localhost:3000';\n\theader: HttpHeaders = new HttpHeaders();\n\tconstructor(private http: HttpClient) {\n\t\tthis.header = this.header.append(\"Accept\", \"application/json\");\n\t\tthis.header = this.header.append(\"Content-Type\", \"application/json\");\n\t\tif(localStorage.getItem('token')){\n\t\t\tthis.header = this.header.set('Authorization', `Bearer ${res. access_token}`);\n\t\t}\n\t}\n\tget(path: string) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((win, lose) => {\n\t\t\tthis.http\n\t\t\t\t.get(urlApi, {})\n\t\t\t\t.pipe(\n\t\t\t\t\tcatchError((err) => {\n\t\t\t\t\t\tlose(err);\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.subscribe((res) => {\n\t\t\t\t\twin(res);\n\t\t\t\t});\n\t\t});\n\t}\n\tpost(path: string, body: any) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// RESOLVE: thanh cong; REJECT: that bai\n\t\t\tthis.http\n\t\t\t\t.post(urlApi, body, { headers: this.header })\n\t\t\t\t.pipe(\n\t\t\t\t\tcatchError((err) => {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn err;\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.subscribe((res) => {\n\t\t\t\t\tresolve(res);\n\t\t\t\t});\n\t\t});\n\t}\n\tpatch(path: string, body: any) {\n\t\tlet urlApi = this.baseUrl + path;\n\t\treturn new Promise((resolve, reject) => {\n\t\t  this.http\n\t\t\t.patch(urlApi, body, { headers: this.header })\n\t\t\t.subscribe(\n\t\t\t  (res) => {\n\t\t\t\tresolve(res);\n\t\t\t  },\n\t\t\t  (err) => {\n\t\t\t\treject(err);\n\t\t\t  }\n\t\t\t);\n\t\t});\n\t  }\n\tlogin(phonenumber: string, password: string) {\n\t\tconst body = {\n\t\t\tphonenumber: phonenumber,\n\t\t\tpassword: password\n\t\t};\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.http.post(`${this.baseUrl}/login`, body).subscribe((res: any) => {\n\t\t\t\t// Thêm accept_token vào header\n\t\t\t\tthis.header = this.header.set('Authorization', `Bearer ${res. access_token}`);\n\t\t\t\tlocalStorage.setItem('token', res. access_token);\n\t\t\t\tresolve(res);\n\t\t\t}, err => reject(err));\n\t\t});\n\t}\n\n\tregister(username: string, password: string, email: string) {\n\t\tconst body = {\n\t\t\tusername: username,\n\t\t\tpassword: password,\n\t\t\temail: email\n\t\t};\n\t\treturn this.post('/register', body);\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}